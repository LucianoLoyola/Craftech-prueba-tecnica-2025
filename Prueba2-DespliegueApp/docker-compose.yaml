
services:
  backend: #Servicio para el backend con Django
    build:
      context: ./backend
      dockerfile: Dockerfile
    depends_on: #No se inicia hasta que se inicia la base de datos PostgreSQL
      - db
    env_file: ./backend/.env.backend
    ports:
      - "8000:8000"
    restart: always #En caso de frenarse el container, se reinicia
    networks:
      - app_network #Red compartida

  frontend: #Servicio para el frontend con React
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - REACT_APP_BACKEND_URL=http://backend:8000/api/
    ports:
      - "80:80"
    depends_on:
      - backend #No se inicia hasta que se inicie el backend
    restart: always #En caso de frenarse el container, se reinicia
    networks:
      - app_network

  db: # Servicio para la base de datos
    image: postgres:12.0-alpine
    container_name: database
    env_file: ./backend/.env.postgres
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - app_network

volumes:
  postgres_data:
    name: craftech_volumen_data

# Red util para tener comunicacion entre los servicios
networks:
  app_network:
    driver: bridge